import pandas as pd
import numpy as np
import argparse, glob
from logreg_train import preprocess


def sigmoid(z):
    return 1/(1+np.exp(-z))


def prediction(input_path, weights_path, output_column, dataset):
    pre = preprocess()
    data = pre.preprocess(input_path, output_column, dataset)

    weights = pd.read_csv(weights_path)
    weights = weights.drop(weights.columns[0], axis=1)

    predictions = {}
    results = pd.DataFrame(index=data.index)
    for weight in weights.columns:
        predictions[weight] = pd.DataFrame(sigmoid(np.dot(data,weights[weight])))
        results = pd.concat([results, predictions[weight]], axis=1)

    results.columns = ['Gryffindor', 'Slytherin', 'Ravenclaw', 'Hufflepuff']

    final_results = pd.DataFrame({'Index': data.index.get_values(), 'Hogwarts house': results.idxmax(axis=1)})
    final_results = final_results[['Index','Hogwarts house']]
    final_results.to_csv('houses.csv', index = False)
    print(final_results['Hogwarts house'])

def main():
    "Entrypoint for predicting."

    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--file',
        help='Hogwarts Data set to run the model the on',
        default='dataset_test.csv')

    parser.add_argument(
        '--weights',
        help='Weights Csv file generated by logreg_train.py',
        default='logreg_weights.csv')


    args = parser.parse_args()

    file = glob.glob(args.file)
    weights = glob.glob(args.weights)

    if len(file)==0 or len(weights)==0:
        print("check inputs")

    prediction(input_path=file[0],
              weights_path=weights[0],
              output_column='Hogwarts House',
              dataset='test')

if __name__ == "__main__":
    main()